{
  "compilerOptions": {
    "target": "esnext", // 目标语言的版本  esnext 可以将es6转换成js
    "module": "esnext", // 生成代码的模板标准
    "strict": true, // 开启所有严格的类型检查
    "jsx": "preserve", // 保持JSX作为输出的一部分，以便由另一个变换步骤（例如Babel）进一步编译 
    "importHelpers": true, // 通过tslib引入helper函数，文件必须是模块
    "moduleResolution": "node", // 模块解析策略，ts默认用node的解析策略，即相对的方式导入
    "skipLibCheck": true, // 忽略所有的声明文件（ *.d.ts）的类型检查
    "esModuleInterop": true, // 允许export=导出，由import from 导入
    "allowSyntheticDefaultImports": true, // 允许从没有设置默认导出的模块中默认导入
    "sourceMap": true, // 生成目标文件的sourceMap文件
    "baseUrl": ".", // 解析非相对模块的基地址，默认是当前目录
    "types": [ // 加载的声明文件包
      "webpack-env"
    ],
    "paths": { // 路径映射，相对于baseUrl
      "@/*": [
        "src/*"
      ]
    },
    "lib": [ // TS需要引用的库，即声明文件，es5 默认引用dom、es5、scripthost,如需要使用es的高级版本特性，通常都需要配置，如es8的数组新特性需要引入"ES2019.Array",
      "esnext",
      "dom",
      "dom.iterable",
      "scripthost"
    ]
  },
  "include": [ // 需要编译的文件或目录
    "src/**/*.ts",
    "src/**/*.tsx",
    "src/**/*.vue",
    "tests/**/*.ts",
    "tests/**/*.tsx"
  ],
  "exclude": [ // 需要排除的文件或文件夹
    "node_modules"
  ]
}
